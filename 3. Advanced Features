#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 3.0 高级特性

-------------------------------------------------------------

# 3.1 切片

L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
M = L[0:3]
# L[0:3] 表示，从索引 0 开始取，直到索引 3 为止，但不包括索引 3。即索引 0，1，2，正好是 3 个元素。
# 如果第一个索引是 0，还可以省略

# Python 支持 L[-1] 取倒数第一个元素，那么它同样支持倒数切片
M = L[-2:]

# 第三个参数可以表示步长：
L = list(range(100))
M = L[0:10:2]

# 什么都不写，只写 [:] 就可以原样复制一个 list：
M = L[:]

# tuple 也是一种 list，唯一区别是 tuple 不可变。因此，tuple 也可以用切片操作，只是操作的结果仍是 tuple：
>>> (0, 1, 2, 3, 4, 5)[:3]
(0, 1, 2)

# 字符串'xxx' 也可以看成是一种 list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：
>>> 'ABCDEFG'[:3]
'ABC'
>>> 'ABCDEFG'[::2]
'ACEG'

# 练习
def trim(s):    
    while s[:1] == ' ':        
        s = s[1:]    
    while s[-1:] == ' ':        
        s = s[:-1]    
    return s

# 留有疑问：
# 为什么下面的code没有办法处理''和'     '？
def trim(s):
    if len(s) == 0:
        return ValueError
    while(True):
        if s == '':
            break
        first = s[:1]
        if first == ' ':
            s = s[1:]
            continue
        end = s[-1:]
        if end == ' ':
            s = s[:-1]
            continue
        else:
            break
    return s

-------------------------------------------------------------

# 3.2 迭代

# 通过 collections.abc 模块的 Iterable 类型判断一个对象是可迭代对象
>>> from collections.abc import Iterable
>>> isinstance('abc', Iterable) # str是否可迭代
True
>>> isinstance([1,2,3], Iterable) # list是否可迭代
True
>>> isinstance(123, Iterable) # 整数是否可迭代
False

# 如果要对 list 实现类似 Java 那样的下标循环怎么办？
# Python 内置的 enumerate 函数可以把一个 list 变成索引 - 元素对，这样就可以在 for 循环中同时迭代索引和元素本身：
>>> for i, value in enumerate(['A', 'B', 'C']):
...     print(i, value)
...
0 A
1 B
2 C

# 上面的 for 循环里，同时引用了两个变量，在 Python 里是很常见的，比如下面的代码：
>>> for x, y in [(1, 1), (2, 4), (3, 9)]:
...     print(x, y)
...
1 1
2 4
3 9

# 习题
def findMinAndMax(L):
    if len(L) == 0:
        return (None, None)
    else:
        max = L[0]
        min = L[0]
        for value in L:
            if value < min:
                min = value
            if  value > max:
                max = value
        return (min, max)

# 测试
if findMinAndMax([]) != (None, None):
    print('测试失败:1!')
elif findMinAndMax([7]) != (7, 7):
    print('测试失败:2!')
elif findMinAndMax([7, 1]) != (1, 7):
    print('测试失败:3!')
elif findMinAndMax([7, 1, 3, 9, 5]) != (1, 9):
    print('测试失败:4!')
else:
    print('测试成功!')

-------------------------------------------------------------

# 3.3 列表生成式

# 生成 list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 可以:
list(range(1,11))

# 生成 [1x1, 2x2, 3x3, ..., 10x10]:
# 1. 循环：
for x in range(1, 11):
...    L.append(x * x)
# 2









-------------------------------------------------------------

# 3.4 生成器

-------------------------------------------------------------

# 3.5 迭代器

-------------------------------------------------------------








