#!/usr/bin/env python3
# -*- coding: utf-8 -*-

-------------------------------------------------------------

# 2.1 调用函数
abs()
max()
int()
float()
str()bool()

-------------------------------------------------------------

# 2.2 定义函数

# 2.2.1 def
def my_abs(x):                                  # 定义一abs函数
    if x >= 0:
        return x
    else:
        return -x

x = input('Please input x for abs: x =')        # 此时x的类型为str
x = int(x)                                      # 转换x的类型
x = my_abs(x)
print('abs(x) is', x)

# 2.2.2 空函数pass
if age >= 18:
    pass
# 缺少了 pass，代码运行就会有语法错误。

# 2.2.3 参数检查
def my_abs(x):                                  
    if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')
    if x >= 0:
        return x
    else:
        return -x

# 2.2.4 返回多个值
def move(x, y, step, angle=0):
    nx = x + step * math.cos(angle)
    ny = y - step * math.sin(angle)
    return nx, ny
# 返回值是一个 tuple！
# 返回一个 tuple 可以省略括号，而多个变量可以同时接收一个 tuple，按位置赋给对应的值

# 2.2.5 练习
def quadratic(a, b, c):
    z1 = (-b + math.sqrt(b*b - 4*a*c)) / 2*a
    z2 = (-b - math.sqrt(b*b - 4*a*c)) / 2*a
    print('z1 =', z1)
    print('z2 =', z2)
    return z1, z2

print('quadratic(2, 3, 1) =', quadratic(2, 3, 1))
print('quadratic(1, 3, -4) =', quadratic(1, 3, -4))

-------------------------------------------------------------

# 2.3 函数的参数

# 2.3.1 位置参数

# 2.3.2 默认参数
# 必选参数在前，默认参数在后，否则 Python 的解释器会报错
# 当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。
# 默认参数必须指向不变对象！

# 2.3.3 可变参数
def calc(*numbers):                     # 定义可变参数和定义一个 list 或 tuple 参数相比，仅仅在参数前面加了一个 * 号。
                                        # 在函数内部，参数 numbers 接收到的是一个 tuple
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
---
# Python 允许你在 list 或 tuple 前面加一个 * 号，把 list 或 tuple 的元素变成可变参数传进去
>>> nums = [1, 2, 3]
>>> calc(*nums)

# 2.3.4 关键字参数
# 可变参数允许你传入 0 个或任意个参数，这些可变参数在函数调用时自动组装为一个 tuple。
# 关键字参数允许你传入 0 个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个 dict
def person(name, age, **kw):
    print('name:', name, 'age:', age, 'other:', kw)
>>> person('Adam', 45, gender='M', job='Engineer')
name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}

# 2.3.5 命名关键字参数
# 限制关键字参数的名字，就可以用命名关键字参数
def person(name, age, *, city, job):
    print(name, age, city, job)
# 和关键字参数 **kw 不同，命名关键字参数需要一个特殊分隔符 *，* 后面的参数被视为命名关键字参数。
# 如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符 * 了：
def person(name, age, *args, city, job):
    print(name, age, args, city, job)
# 命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错
# 命名关键字参数可以有缺省值，从而简化调用：
def person(name, age, *, city='Beijing', job):
    print(name, age, city, job)
# 使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个 * 作为特殊分隔符。如果缺少 *，Python 解释器将无法识别位置参数和命名关键字参数

# 2.3.6 参数组合
# 在 Python 中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这 5 种参数都可以组合使用。
# 但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。
def f1(a, b, c=0, *args, **kw):
    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)

def f2(a, b, c=0, *, d, **kw):
    print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)
# 所以，对于任意函数，都可以通过类似 func(*args, **kw) 的形式调用它，无论它的参数是如何定义的。

-------------------------------------------------------------

# 2.4 习题 

# 2.4.1 自解
def mul(*number):
    sum = 1
#   if number = []:             # 如何判断没有传入参数的情况？
#       return 'Error'          # 因为如果没有传入参数的话，函数会返回1
    for n in number:
        sum = sum * n
    return sum
print('mul(5) =', mul(5))
print('mul(5, 6) =', mul(5, 6))
print('mul(5, 6, 7) =', mul(5, 6, 7))
print('mul(5, 6, 7, 9) =', mul(5, 6, 7, 9))

# 2.4.2 解惑
# 加入len（）函数判断传入的list或tuple长度即可
if len(number) == 0:
    return x

# 2.4.3 优解一
def mul(x, *numbers):
    if len(numbers) == 0:
        return x
    else:
        return x * mul(*numbers)

# 2.4.4 优解二
# if判断完以后，raise TypeError

-------------------------------------------------------------

# 2.5 小结
# Python 的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。
# 默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！
# 要注意定义可变参数和关键字参数的语法：
# *args 是可变参数，args 接收的是一个 tuple；
# **kw 是关键字参数，kw 接收的是一个 dict。
# 以及调用函数时如何传入可变参数和关键字参数的语法：
# 可变参数既可以直接传入：func(1, 2, 3)，又可以先组装 list 或 tuple，再通过 *args 传入：func(*(1, 2, 3))；
# 关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装 dict，再通过 **kw 传入：func(**{'a': 1, 'b': 2})。
# 使用 *args 和 **kw 是 Python 的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。
# 命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。
# 定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符 *，否则定义的将是位置参数。
